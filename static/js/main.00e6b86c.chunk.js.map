{"version":3,"sources":["utils/thumbs/linear.jpg","utils/thumbs/binary.jpg","utils/thumbs/nqueens.jpg","utils/thumbs/path.jpg","utils/thumbs/rat.jpg","utils/thumbs/sorting.jpg","utils/thumbs/word_search.jpg","backTrackingAlgorithms/nQueensProblem/crown.png","utils/navbar.jsx","utils/indexTable.jsx","wordSearchVisualiser/wordSearch-utils/chars.js","wordSearchVisualiser/Cell/Cell.jsx","utils/randomIntFromInterval.js","wordSearchVisualiser/algorithms/wordDFS.js","utils/backbar.jsx","wordSearchVisualiser/wordSearch-utils/problemStatement.jsx","wordSearchVisualiser/wordSearch.jsx","sortingAlgorithms/complexityTable.jsx","sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/cellColors.js","sortingAlgorithms/sortingVisualiser.jsx","utils/header.jsx","searchingAlgorithms/arrayTile.jsx","searchingAlgorithms/binarySearch/binarySearch.jsx","searchingAlgorithms/searchingAlgorithms.js","searchingAlgorithms/linearSearch/linearSearch.jsx","backTrackingAlgorithms/backTrackingAlgorithms.js","backTrackingAlgorithms/nQueensProblem/nQueensProblem.jsx","backTrackingAlgorithms/ratInAMaze/arrayofMazes.js","backTrackingAlgorithms/ratInAMaze/ratInAMaze.jsx","pathFinderVisualiser/Node/Node.jsx","pathFinderVisualiser/pathfinder-utils/arrayConversions.js","pathFinderVisualiser/pathFindingAlgorithms/dijkstra.js","pathFinderVisualiser/pathFindingAlgorithms/breadthFirstSearch.js","pathFinderVisualiser/pathFindingAlgorithms/depthFirstSearch.js","pathFinderVisualiser/pathFindingAlgorithms/astar.js","pathFinderVisualiser/pathFindingAlgorithms/bidirectionalSearch.js","pathFinderVisualiser/pathfinder-utils/highlightMazeNodes.js","pathFinderVisualiser/pathfinder-utils/legend.jsx","pathFinderVisualiser/pathfinder-utils/complexityTable.jsx","pathFinderVisualiser/pathfinderVisualiser.jsx","pathFinderVisualiser/generateMaze.js","App.js","index.js"],"names":["module","exports","NavBar","className","href","IndexTable","props","state","to","src","WordSearch","alt","PathThumb","SortingThumb","NQueensThumb","LinearThumb","BinaryThumb","RatThumb","React","Component","CHARS","Cell","this","row","col","val","found","extraClass","visited","id","randomIntFromInterval","min","max","Math","floor","random","dfs","grid","i","j","count","word","animations","length","push","charAt","temp","BackBar","ProblemStatement","disabled","resetArray","cell","document","getElementById","console","log","clearBoard","gridBox","style","setProperty","array","Array","setState","value","toUpperCase","wordDFS","founds","slice","highlightSection","k","testing","setTimeout","classList","transition","add","alert","map","ele","idx","key","type","placeholder","role","aria-label","onClick","newBoard","visualiseWordSearch","ComplexityTable","colSpan","getMergeSortAnimations","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","doMerge","quickSortHelper","left","right","pivot","swap","buildMaxHeap","heapify","index","leftChild","righChild","heap","arr","cellColors","color","reverse","SortingVisualiser","SIZE_OF_BOARD","drawBoard","arrayBoard","innerHTML","container","createElement","appendChild","cellStyle","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","parseInt","bubbleSort","selectionSort","insertionSort","quickSort","heapSort","mergeSort","speedFactor","arrayBlocks","getElementsByClassName","idxOne","idxTwo","elemOne","elemTwo","blockOne","blockTwo","blockOneStyle","blockTwoStyle","blockOneIdx","newColor","getQuickSortAnimations","items","visualiseAnimations","isSorted","counter","getBubbleSortAnimations","getInsertionSortAnimations","currentIdx","smallestIdx","getSelectionSortAnimations","lastElement","getHeapSortAnimations","defaultValue","selectAlgorithm","Header","title","ArrayTile","BinarySearch","elementFoundAt","target","msgAfterExecution","previousLength","prevArray","remove","sortedArray","sort","a","b","start","end","arrayTiles","binarySearchAnimations","element","mid","resetAllTiles","hightlightWithinBounds","binarySearch","LinearSearch","msg","linearSearchAnimations","currentEle","arrayBar","arrayBarStyle","linearSearch","createBoard","size","board","getRowsOfZeroes","solveNQueenUtil","N","isSafe","isRatSafe","maze","x","y","mazeRows","mazeCols","solveRatInAMaze","sol","endOfMazeX","endOfMazeY","ANIMATION_SPEED_SECONDS","NQueensProblem","SIZE","padding","fontSize","item","crownsI","l","crown","resultsDiv","NQueensAnimations","getNQueensAnimations","isQueenSafe","prepend","trueValues","width","readOnly","MAZES","MAZE","SOL","prepareSolutionBoardOfZeroes","RatInAMazeProblem","solveMaze","solution","blocks","rat","finalPath","blockStyle","ROWS","COLS","testAlgo","Node","isFinish","isStart","isWall","onNodeClick","onNodeOver","onNodeOut","extraClassName","onMouseOver","onMouseOut","convert1Dto2DArray","OneDArray","twoDArray","oneDRow","dijkstra","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","getAllNodes","sortNodesByDistance","closestNode","shift","Infinity","calculatePath","isVisited","updateUnvisitedNeighbors","nodeA","nodeB","node","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","shortestPathNodes","currentNode","unshift","getAllNeighbors","calculateCost","distanceType","sqrt","pow","abs","getNeighbors","getAdjacents","getNodeNeighbors","nodeArray","Legend","PathFinderVisualiser","modifyingNodeState","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","disableMazesButton","disableNodesButton","disableClearMazeButton","highlightMazeNodes","isGridDiagonalsHighlighted","speed","setUpGrid","createNode","algorithm","visualiseAlgorithms","nodesInShortestPathOrder","d2Grid","STARTNODE","FINISHNODE","queue","bfs","closedlist","openlist","cost","F","G","H","current","nNode","includes","astar","squeue","dqueue","svisited","dvisited","currsn","currdn","sneighbors","dneighbors","sneighbor","dneighbor","sourcePaths","destPaths","sPathRow","splast","destPathRow","bidirectionalSearch","source_visited","dest_visited","sPathNodes","dPathNodes","animatePath","stack","pop","nodeVal","nRow","nCol","highlightGrid","unHighlightGrid","highlightGridDiagonals","unHighlightGridDiagonals","NODE_ROW","NODE_COL","nodeType","newGrid","newNode","NODE_STATE","toggleStartOrFinish","toggleWall","STATE","TwoDArray","convert2Dto1DArray","ROW","COL","generate","height","generateMaze","animateShortestPath","unHighlightDiagonals","highlightDiagonals","handleNodeOperations","highlightNodes","unHighlightNodes","modifyNodeState","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.00e6b86c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linear.bc4175c7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/binary.3582986e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nqueens.63f2635b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/path.6c03c306.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rat.347ac12a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sorting.3d81dd95.jpg\";","module.exports = __webpack_public_path__ + \"static/media/word_search.4e0dc703.jpg\";","module.exports = __webpack_public_path__ + \"static/media/crown.684af6ea.png\";","import React from \"react\";\r\n\r\nconst NavBar = () => (\r\n    <div className=\"bg-dark py-2 px-2\">\r\n        <span>\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\r\n                href=\"https://github.com/dipeshpatil/algorithms-visualiser\"\r\n            >\r\n                <i className=\"fab text-light fa-github\"></i>\r\n                &nbsp; Repo URL\r\n            </a>\r\n            <a\r\n                className=\"btn-sm text-decoration-none bg-dark rounded-0 text-light\"\r\n                href=\"https://linkedin.com/in/dipesh-patil\"\r\n            >\r\n                <i className=\"fab text-light fa-linkedin\"></i>\r\n                &nbsp; Dipesh Patil\r\n            </a>\r\n        </span>\r\n    </div>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport LinearThumb from \"./thumbs/linear.jpg\";\r\nimport BinaryThumb from \"./thumbs/binary.jpg\";\r\nimport NQueensThumb from \"./thumbs/nqueens.jpg\";\r\nimport PathThumb from \"./thumbs/path.jpg\";\r\nimport RatThumb from \"./thumbs/rat.jpg\";\r\nimport SortingThumb from \"./thumbs/sorting.jpg\";\r\nimport WordSearch from \"./thumbs/word_search.jpg\";\r\n\r\nimport \"./bootstrap.min.css\";\r\n\r\nexport default class IndexTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-2\">\r\n                <div className=\"text-center text-muted\">\r\n                    Happy Visualisation Day!\r\n                </div>\r\n                <center>\r\n                    <div className=\"row mt-2\">\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/word-search\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={WordSearch}\r\n                                    alt=\"Word Searching\"\r\n                                />\r\n                                <p className=\"text-dark thumb-title\">\r\n                                    Word Searching\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/pathfinder\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={PathThumb}\r\n                                    alt=\"Path Finding\"\r\n                                />\r\n                                <p className=\"text-dark thumb-title\">\r\n                                    Path Finding\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/sorting\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={SortingThumb}\r\n                                    alt=\"Sorting\"\r\n                                />\r\n                                <p className=\"text-dark thumb-title\">\r\n                                    Sorting Visualiser\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/n-queens-problem\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={NQueensThumb}\r\n                                    alt=\"NQueens\"\r\n                                />\r\n                                <p className=\"text-dark thumb-title\">\r\n                                    NQueens Problem\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/linear-search\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={LinearThumb}\r\n                                    alt=\"Linear Search\"\r\n                                />\r\n                                <p className=\"text-dark thumb-title\">\r\n                                    Linear Search\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/binary-search\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={BinaryThumb}\r\n                                    alt=\"Binary Search\"\r\n                                />\r\n                                <p className=\"text-dark thumb-title\">\r\n                                    Binary Search\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-6\">\r\n                            <NavLink to=\"/rat-in-a-maze\">\r\n                                <img\r\n                                    className=\"img-fluid w-20 shadowB\"\r\n                                    src={RatThumb}\r\n                                    alt=\"Rat In A Maze\"\r\n                                />\r\n                                <p className=\"text-dark thumb-title\">\r\n                                    Rat In A Maze\r\n                                </p>\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const CHARS = [\r\n    \"A\",\r\n    \"B\",\r\n    \"C\",\r\n    \"D\",\r\n    \"E\",\r\n    \"F\",\r\n    \"G\",\r\n    \"H\",\r\n    \"I\",\r\n    \"J\",\r\n    \"K\",\r\n    \"L\",\r\n    \"M\",\r\n    \"N\",\r\n    \"O\",\r\n    \"P\",\r\n    \"Q\",\r\n    \"R\",\r\n    \"S\",\r\n    \"T\",\r\n    \"U\",\r\n    \"V\",\r\n    \"W\",\r\n    \"X\",\r\n    \"Y\",\r\n    \"Z\",\r\n];\r\n\r\nexport default CHARS;\r\n","import React from \"react\";\r\n\r\nimport \"./Cell.css\";\r\n\r\nexport default class Cell extends React.Component {\r\n    render() {\r\n        const { row, col, val, found, visited } = this.props;\r\n\r\n        const extraClass = found ? \"found-cell\" : \"default-cell\";\r\n\r\n        return (\r\n            <div id={`cell-${row}-${col}`} className={`ws-cell ${extraClass}`}>\r\n                {val}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","export function wordDFS(grid = [], word, animations = []) {\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            const { row, col, val, visited } = grid[i][j];\r\n            animations.push([i, j, \"testing\", \"not-found\"]);\r\n            if (\r\n                val === word.charAt(0) &&\r\n                dfs(grid, row, col, 0, word, animations) &&\r\n                !visited\r\n            ) {\r\n                grid[i][j].visited = true;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction dfs(grid = [], i, j, count, word, animations = []) {\r\n    if (count === word.length) return true;\r\n\r\n    if (i >= 0 && i < grid.length && j >= 0 && j < grid[i].length) {\r\n        animations.push([i, j, \"not-found\", \"not-found\"]);\r\n    }\r\n\r\n    if (\r\n        i < 0 ||\r\n        i >= grid.length ||\r\n        j < 0 ||\r\n        j >= grid[i].length ||\r\n        grid[i][j].val !== word.charAt(count)\r\n    )\r\n        return false;\r\n    let temp = grid[i][j].val;\r\n    grid[i][j].val = \" \";\r\n\r\n    var found =\r\n        dfs(grid, i + 1, j, count + 1, word, animations) ||\r\n        dfs(grid, i - 1, j, count + 1, word, animations) ||\r\n        dfs(grid, i, j + 1, count + 1, word, animations) ||\r\n        dfs(grid, i, j - 1, count + 1, word, animations);\r\n\r\n    if (found === true) {\r\n        animations.push([i, j, \"not-found\", \"found\"]);\r\n    } else {\r\n        animations.push([i, j, \"not-found\", \"not-found\"]);\r\n    }\r\n    grid[i][j].val = temp;\r\n    return found;\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst BackBar = () => (\r\n    <div className=\"bg-secondary py-2\">\r\n        <NavLink to=\"/\">\r\n            <span className=\"text-light ml-3\">\r\n                <i className=\"fas fa-arrow-left\"></i> Back\r\n            </span>\r\n        </NavLink>\r\n    </div>\r\n);\r\n\r\nexport default BackBar;\r\n","import React from \"react\";\r\n\r\nconst ProblemStatement = () => (\r\n    <div className=\"mt-2\">\r\n        <br />\r\n        Given a 2D board and a word, find if the word exists in the grid.\r\n        <br />\r\n        <br />\r\n        The word can be constructed from letters of sequentially adjacent cell,\r\n        where \"adjacent\" cells are those horizontally or vertically neighboring.\r\n        The same letter cell may not be used more than once.\r\n        <br />\r\n        <br />\r\n        <b>Example:</b>\r\n        <br />\r\n        <br />\r\n        <pre>\r\n            <b>board</b> = [<br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['A','B','C','E'],\r\n            <br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['S','F','C','S'],\r\n            <br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;['A','D','E','E']\r\n            <br />\r\n            ]\r\n            <br />\r\n            <br />\r\n            Given word = \"<b>ABCCED</b>\", return <b>true</b> <br />\r\n            Given word = \"<b>SEE</b>\", return <b>true</b> <br />\r\n            Given word = \"<b>ABCB</b>\", return <b>false</b>\r\n        </pre>\r\n    </div>\r\n);\r\n\r\nexport default ProblemStatement;\r\n","import React from \"react\";\r\n\r\nimport CHARS from \"./wordSearch-utils/chars\";\r\nimport Cell from \"./Cell/Cell\";\r\nimport { randomIntFromInterval } from \"./../utils/randomIntFromInterval\";\r\n\r\nimport { wordDFS } from \"./algorithms/wordDFS\";\r\nimport BackBar from \"./../utils/backbar\";\r\nimport ProblemStatement from \"./wordSearch-utils/problemStatement\";\r\n\r\nconst BOARD_SIZE = 10;\r\n\r\nexport default class WordSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            disabled: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    clearBoard() {\r\n        for (let i = 0; i < BOARD_SIZE; i++) {\r\n            for (let j = 0; j < BOARD_SIZE; j++) {\r\n                let cell = document.getElementById(`cell-${i}-${j}`);\r\n                cell.className = \"ws-cell default-cell\";\r\n                console.log(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    newBoard() {\r\n        this.clearBoard();\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const gridBox = document.getElementById(\"ws-grid\");\r\n        gridBox.style.setProperty(\"--ws-grid-rows\", BOARD_SIZE);\r\n        gridBox.style.setProperty(\"--ws-grid-cols\", BOARD_SIZE);\r\n\r\n        const array = new Array(BOARD_SIZE);\r\n        for (let i = 0; i < BOARD_SIZE; i++) {\r\n            array[i] = new Array(BOARD_SIZE);\r\n            for (let j = 0; j < BOARD_SIZE; j++) {\r\n                array[i][j] = {\r\n                    row: i,\r\n                    col: j,\r\n                    val: CHARS[randomIntFromInterval(0, CHARS.length - 1)],\r\n                    found: false,\r\n                    visited: false,\r\n                };\r\n            }\r\n        }\r\n\r\n        this.setState({ grid: array });\r\n    }\r\n\r\n    visualiseWordSearch() {\r\n        const word = document.getElementById(\"word\").value.toUpperCase();\r\n\r\n        if (!word) {\r\n            alert(\"Word must be provided\");\r\n            return;\r\n        }\r\n\r\n        this.setState({ disabled: true });\r\n\r\n        const animations = [];\r\n        const { grid } = this.state;\r\n        wordDFS(grid, word, animations);\r\n\r\n        const founds = animations.slice();\r\n        const highlightSection = [];\r\n        for (let k = 0; k < founds.length; k++) {\r\n            const [i, j, test, found] = founds[k];\r\n            if (found === \"found\") highlightSection.push([i, j]);\r\n        }\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [row, col, testing, found] = animations[i];\r\n            const cell = document.getElementById(`cell-${row}-${col}`);\r\n            setTimeout(() => {\r\n                if (testing === \"testing\") {\r\n                    cell.classList = \"ws-cell testing\";\r\n                } else if (found === \"found\") {\r\n                    cell.classList = \"ws-cell found-cell\";\r\n                } else {\r\n                    cell.classList = \"ws-cell not-found-cell\";\r\n                }\r\n                cell.style.transition = \"500ms all\";\r\n\r\n                if (i === animations.length - 1) {\r\n                    this.setState({ disabled: false });\r\n                    for (let k = 0; k < highlightSection.length; k++) {\r\n                        const [i, j] = highlightSection[k];\r\n                        setTimeout(() => {\r\n                            document\r\n                                .getElementById(`cell-${i}-${j}`)\r\n                                .classList.add(\"ws-popupBlocks\");\r\n                        }, k * 50);\r\n                    }\r\n                }\r\n            }, i * 500);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { grid, disabled } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7 mt-1\">\r\n                            <div className=\"ws-box rounded shadowB\">\r\n                                <div className=\"ws-grid\" id=\"ws-grid\">\r\n                                    {grid.map((ele) => {\r\n                                        return ele.map((cell, idx) => {\r\n                                            const {\r\n                                                row,\r\n                                                col,\r\n                                                val,\r\n                                                found,\r\n                                                visited,\r\n                                            } = cell;\r\n                                            return (\r\n                                                <Cell\r\n                                                    key={`${row}-${col}`}\r\n                                                    row={row}\r\n                                                    col={col}\r\n                                                    val={val}\r\n                                                    visited={visited}\r\n                                                    found={found}\r\n                                                />\r\n                                            );\r\n                                        });\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-5 mt-2\">\r\n                            <div className=\"input-group\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span\r\n                                        className=\"input-group-text\"\r\n                                        id=\"basic-addon2\"\r\n                                    >\r\n                                        Word\r\n                                    </span>\r\n                                </div>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id=\"word\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Ex. BINOD\"\r\n                                />\r\n                            </div>\r\n                            <div\r\n                                className=\"btn-group btn-block mt-2\"\r\n                                role=\"group\"\r\n                                aria-label=\"Basic example\"\r\n                            >\r\n                                <button\r\n                                    onClick={() => this.clearBoard()}\r\n                                    type=\"button\"\r\n                                    disabled={disabled}\r\n                                    className=\"btn btn-danger\"\r\n                                >\r\n                                    Reset\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => this.newBoard()}\r\n                                    type=\"button\"\r\n                                    disabled={disabled}\r\n                                    className=\"btn btn-success\"\r\n                                >\r\n                                    New\r\n                                </button>\r\n                                <button\r\n                                    onClick={() => this.visualiseWordSearch()}\r\n                                    type=\"button\"\r\n                                    disabled={disabled}\r\n                                    className=\"btn btn-dark\"\r\n                                >\r\n                                    Search\r\n                                </button>\r\n                            </div>\r\n                            <ProblemStatement />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTable\">\r\n        <table className=\"table-bordered table table-striped text-center rounded-b mt-2 shadowT table-light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th colSpan=\"2\">Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Case: </td>\r\n                    <td className=\"text-success table-success\">Best</td>\r\n                    <td className=\"text-danger table-danger\">Worst</td>\r\n                    <td></td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Heap Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Merge Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Quick Sort</td>\r\n                    <td>N&times;Log N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>Log N</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Bubble Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Insertion Sort</td>\r\n                    <td>N</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Selection Sort</td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>\r\n                        N<sup>2</sup>\r\n                    </td>\r\n                    <td>1</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(\r\n        auxiliaryArray,\r\n        middleIdx + 1,\r\n        endIdx,\r\n        mainArray,\r\n        animations\r\n    );\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array = []) {\r\n    const animations = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < array.length - 1 - counter; i++) {\r\n            if (array[i] > array[i + 1]) {\r\n                swap(i, i + 1, array);\r\n                isSorted = false;\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            } else {\r\n                animations.push([i, i + 1, array[i], array[i + 1]]);\r\n            }\r\n        }\r\n        counter++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array = []) {\r\n    const animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        let j = i;\r\n        while (j > 0 && array[j] < array[j - 1]) {\r\n            swap(j, j - 1, array);\r\n            animations.push([j, j - 1, array[j], array[j - 1]]);\r\n            j -= 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getSelectionSortAnimations(array = []) {\r\n    const animations = [];\r\n    let currentIdx = 0;\r\n    while (currentIdx < array.length - 1) {\r\n        let smallestIdx = currentIdx;\r\n        for (let i = currentIdx + 1; i < array.length; i++) {\r\n            if (array[smallestIdx] > array[i]) smallestIdx = i;\r\n        }\r\n        if (currentIdx < smallestIdx) {\r\n            swap(currentIdx, smallestIdx, array);\r\n            animations.push([\r\n                currentIdx,\r\n                smallestIdx,\r\n                array[currentIdx],\r\n                array[smallestIdx],\r\n            ]);\r\n        }\r\n        currentIdx++;\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array = [], left, right, animations = []) {\r\n    let pivot = array[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n    while (i <= j) {\r\n        while (array[i] < pivot) i++;\r\n\r\n        while (array[j] > pivot) j--;\r\n\r\n        if (i <= j) {\r\n            swap(i, j, array);\r\n            animations.push([i, j, array[i++], array[j--]]);\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport function getQuickSortAnimations(\r\n    items = [],\r\n    left,\r\n    right,\r\n    animations = []\r\n) {\r\n    let index;\r\n    if (items.length > 1) {\r\n        index = quickSortHelper(items, left, right, animations);\r\n        if (left < index - 1) {\r\n            getQuickSortAnimations(items, left, index - 1, animations);\r\n        }\r\n        if (index < right) {\r\n            getQuickSortAnimations(items, index, right, animations);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getHeapSortAnimations(array = [], animations = []) {\r\n    buildMaxHeap(array, animations);\r\n    let lastElement = array.length - 1;\r\n    while (lastElement > 0) {\r\n        swap(0, lastElement, array);\r\n        animations.push([0, lastElement, array[0], array[lastElement]]);\r\n        heapify(array, 0, lastElement, animations);\r\n        lastElement -= 1;\r\n    }\r\n}\r\n\r\nfunction buildMaxHeap(array = [], animations = []) {\r\n    let i;\r\n    i = array.length / 2 - 1;\r\n    i = Math.floor(i);\r\n    while (i >= 0) {\r\n        heapify(array, i, array.length, animations);\r\n        i -= 1;\r\n    }\r\n}\r\n\r\nfunction heapify(heap = [], i, max, animations = []) {\r\n    let index, leftChild, righChild;\r\n\r\n    while (i < max) {\r\n        index = i;\r\n        leftChild = 2 * i + 1;\r\n        righChild = leftChild + 1;\r\n\r\n        if (leftChild < max && heap[leftChild] > heap[index]) index = leftChild;\r\n\r\n        if (righChild < max && heap[righChild] > heap[index]) index = righChild;\r\n\r\n        if (index === i) return;\r\n\r\n        swap(i, index, heap);\r\n        animations.push([i, index, heap[i], heap[index]]);\r\n        i = index;\r\n    }\r\n}\r\n\r\nfunction swap(i, j, arr = []) {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n","const cellColors = [\r\n    [\r\n        \"#040C12\",\r\n        \"#081925\",\r\n        \"#0C2637\",\r\n        \"#10334A\",\r\n        \"#14405C\",\r\n        \"#184C6F\",\r\n        \"#1C5981\",\r\n        \"#206694\",\r\n        \"#2473A6\",\r\n        \"#2980B9\",\r\n        \"#3E8CC0\",\r\n        \"#5399C7\",\r\n        \"#69A6CE\",\r\n        \"#7EB2D5\",\r\n        \"#94BFDC\",\r\n        \"#A9CCE3\",\r\n        \"#BED8EA\",\r\n        \"#D4E5F1\",\r\n        \"#E9F2F8\",\r\n    ],\r\n    [\r\n        \"#180308\",\r\n        \"#300610\",\r\n        \"#480918\",\r\n        \"#600C21\",\r\n        \"#780F29\",\r\n        \"#901231\",\r\n        \"#A8153A\",\r\n        \"#C01842\",\r\n        \"#D81B4A\",\r\n        \"#F01F53\",\r\n        \"#F13564\",\r\n        \"#F34B75\",\r\n        \"#F46286\",\r\n        \"#F67897\",\r\n        \"#F78FA9\",\r\n        \"#F9A5BA\",\r\n        \"#FABBCB\",\r\n        \"#FCD2DC\",\r\n        \"#FDE8ED\",\r\n    ],\r\n    [\r\n        \"#180C03\",\r\n        \"#301906\",\r\n        \"#482609\",\r\n        \"#60330C\",\r\n        \"#78400F\",\r\n        \"#904D12\",\r\n        \"#A85A15\",\r\n        \"#C06718\",\r\n        \"#D8741B\",\r\n        \"#F0811F\",\r\n        \"#F18D35\",\r\n        \"#F39A4B\",\r\n        \"#F4A662\",\r\n        \"#F6B378\",\r\n        \"#F7C08F\",\r\n        \"#F9CCA5\",\r\n        \"#FAD9BB\",\r\n        \"#FCE5D2\",\r\n        \"#FDF2E8\",\r\n    ],\r\n    [\r\n        \"#0D0118\",\r\n        \"#1A0231\",\r\n        \"#27034A\",\r\n        \"#340463\",\r\n        \"#41067C\",\r\n        \"#4E0795\",\r\n        \"#5B08AE\",\r\n        \"#6809C7\",\r\n        \"#750AE0\",\r\n        \"#820CF9\",\r\n        \"#8E24F9\",\r\n        \"#9B3CFA\",\r\n        \"#A754FA\",\r\n        \"#B46DFB\",\r\n        \"#C085FC\",\r\n        \"#CD9DFC\",\r\n        \"#D9B6FD\",\r\n        \"#E6CEFD\",\r\n        \"#F2E6FE\",\r\n    ],\r\n];\r\n\r\nexport default cellColors;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"../utils/randomIntFromInterval\";\r\nimport ComplexityTable from \"./complexityTable\";\r\nimport {\r\n    getMergeSortAnimations,\r\n    getBubbleSortAnimations,\r\n    getInsertionSortAnimations,\r\n    getSelectionSortAnimations,\r\n    getQuickSortAnimations,\r\n    getHeapSortAnimations,\r\n} from \"./sortingAlgorithms\";\r\n\r\nimport cellColors from \"./cellColors\";\r\n\r\n// Stylesheets\r\nimport \"./sortingVisualiser.css\";\r\n\r\nimport BackBar from \"./../utils/backbar\";\r\n\r\nvar SELECTED = randomIntFromInterval(0, cellColors.length - 1);\r\nconst color = cellColors[SELECTED].reverse();\r\n\r\nconst SIZE_OF_BOARD = 20; // Size of Board -> N x N Size of 1D Array\r\nvar ANIMATION_SPEED = 1; // Greater Value -> Slower Animation\r\nconst CELL_CORNER_BORDER_RADIUS = 3;\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            disabled: false,\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < SIZE_OF_BOARD * SIZE_OF_BOARD; i++) {\r\n            let val = randomIntFromInterval(0, color.length - 1);\r\n            array.push(val);\r\n        }\r\n        this.setState({ array });\r\n        this.drawBoard(array);\r\n    }\r\n\r\n    drawBoard(arrayBoard = []) {\r\n        document.getElementById(\"sortingBoard\").innerHTML = \"\";\r\n        // creating the board\r\n        const container = document.getElementById(\"sortingBoard\");\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--grid-rows\", SIZE_OF_BOARD);\r\n        container.style.setProperty(\"--grid-cols\", SIZE_OF_BOARD);\r\n        // Adding cells to the board\r\n        for (let j = 0; j < arrayBoard.length; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            container.appendChild(cell).className = \"grid-item\";\r\n            let cellStyle = cell.style;\r\n            cellStyle.backgroundColor = color[arrayBoard[j]];\r\n\r\n            // styling the corners\r\n            if (j === 0) {\r\n                cellStyle.borderTopLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderTopRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * SIZE_OF_BOARD - 1) {\r\n                cellStyle.borderBottomRightRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            } else if (j === SIZE_OF_BOARD * (SIZE_OF_BOARD - 1)) {\r\n                cellStyle.borderBottomLeftRadius = `${CELL_CORNER_BORDER_RADIUS}px`;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        let selectedValue = parseInt(\r\n            document.getElementById(\"sortingAlgoDropDown\").value\r\n        );\r\n        switch (selectedValue) {\r\n            case 0:\r\n                alert(\"Select An Algorithm First!\");\r\n                break;\r\n            case 1:\r\n                this.bubbleSort();\r\n                break;\r\n            case 2:\r\n                this.selectionSort();\r\n                break;\r\n            case 3:\r\n                this.insertionSort();\r\n                break;\r\n            case 4:\r\n                this.quickSort();\r\n                break;\r\n            case 5:\r\n                this.heapSort();\r\n                break;\r\n            case 6:\r\n                this.mergeSort();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    visualiseAnimations(animations = [], speedFactor) {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            let count = 0;\r\n            for (let i = 0; i < animations.length; i++) {\r\n                const [idxOne, idxTwo, elemOne, elemTwo] = animations[i];\r\n                const blockOne = arrayBlocks[idxOne];\r\n                const blockTwo = arrayBlocks[idxTwo];\r\n                const blockOneStyle = blockOne.style;\r\n                const blockTwoStyle = blockTwo.style;\r\n\r\n                setTimeout(() => {\r\n                    blockOneStyle.backgroundColor = color[elemOne];\r\n                    blockTwoStyle.backgroundColor = color[elemTwo];\r\n\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                    blockTwoStyle.transition = \"150ms all\";\r\n                }, ANIMATION_SPEED * speedFactor * (i + 1));\r\n                count++;\r\n            }\r\n\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * speedFactor * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    mergeSort() {\r\n        this.setState({ disabled: true });\r\n        setTimeout(() => {\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            let count = 0;\r\n            const arrayBlocks = document.getElementsByClassName(\"grid-item\");\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    const [blockOneIdx, newColor] = animations[i];\r\n                    const blockOneStyle = arrayBlocks[blockOneIdx].style;\r\n                    blockOneStyle.backgroundColor = color[newColor];\r\n                    blockOneStyle.transition = \"150ms all\";\r\n                }, i * ANIMATION_SPEED);\r\n                count++;\r\n            }\r\n            setTimeout(() => {\r\n                for (let i = 0; i < arrayBlocks.length; i++) {\r\n                    setTimeout(() => {\r\n                        arrayBlocks[i].classList.add(\"popupBlocks\");\r\n                    }, ANIMATION_SPEED * i);\r\n                }\r\n                this.setState({ disabled: false });\r\n            }, ANIMATION_SPEED * (count + 1));\r\n        }, 1000);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = [];\r\n        getQuickSortAnimations(\r\n            this.state.array,\r\n            0,\r\n            this.state.array.length - 1,\r\n            animations\r\n        );\r\n        this.visualiseAnimations(animations, 3.5);\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.4);\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 0.8);\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        this.visualiseAnimations(animations, 50);\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = [];\r\n        getHeapSortAnimations(this.state.array, animations);\r\n        this.visualiseAnimations(animations, 2);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7\">\r\n                            <div\r\n                                className=\"box shadowT board\"\r\n                                id=\"sortingBoard\"\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 mt-1\">\r\n                            <div className=\"input-group mt-1\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <button\r\n                                        onClick={() => this.resetArray()}\r\n                                        className=\"btn btn-danger\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        New Array\r\n                                    </button>\r\n                                </div>\r\n                                <select\r\n                                    className=\"custom-select\"\r\n                                    id=\"sortingAlgoDropDown\"\r\n                                    disabled={disabled}\r\n                                    defaultValue=\"0\"\r\n                                >\r\n                                    <option disabled value=\"0\">\r\n                                        Algorithm\r\n                                    </option>\r\n                                    <option value=\"1\">Bubble Sort</option>\r\n                                    <option value=\"2\">Selection Sort</option>\r\n                                    <option value=\"3\">Insertion Sort</option>\r\n                                    <option value=\"4\">Quick Sort</option>\r\n                                    <option value=\"5\">Heap Sort</option>\r\n                                    <option value=\"6\">Merge Sort</option>\r\n                                </select>\r\n                                <div className=\"input-group-append\">\r\n                                    <button\r\n                                        onClick={() => this.selectAlgorithm()}\r\n                                        className=\"btn btn-success\"\r\n                                        disabled={disabled}\r\n                                    >\r\n                                        Visualize\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <ComplexityTable />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <div>\r\n        <h2 className=\"mt-3 text-center\" >{title}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst ArrayTile = ({ idx, val, type }) =>\r\n    type === \"binarySearch\" ? (\r\n        <div className=\"b-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    ) : (\r\n        <div className=\"l-array-bar\">\r\n            {`${val}`}\r\n            <br />\r\n            <span>{`${idx}`}</span>\r\n        </div>\r\n    );\r\n\r\nexport default ArrayTile;\r\n","import React from \"react\";\r\n\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { binarySearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\nimport BackBar from \"./../../utils/backbar\";\r\n\r\n//Stylesheets\r\nimport \"./binarySearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 3;\r\n\r\nexport default class BinarySearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: null,\r\n            previousLength: 0,\r\n            animations: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let array = [];\r\n        const prevArray = document.getElementsByClassName(\"b-array-bar\");\r\n        document.getElementById(\"binarySearchTargetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 850));\r\n        }\r\n        let sortedArray = array.slice().sort((a, b) => a - b);\r\n        this.setState({\r\n            array: sortedArray,\r\n            found: false,\r\n            disabled: false,\r\n            msgAfterExecution: null,\r\n            previousLength: this.state.animations.length,\r\n        });\r\n    }\r\n\r\n    hightlightWithinBounds(start, end, arrayTiles) {\r\n        for (let i = start; i <= end; i++) {\r\n            arrayTiles[i].style.backgroundColor = NOT_FOUND_COLOR;\r\n            arrayTiles[i].style.transition = \"100ms all\";\r\n        }\r\n    }\r\n\r\n    resetAllTiles(arrayTiles) {\r\n        for (let i = 0; i < arrayTiles.length; i++) {\r\n            arrayTiles[i].style.backgroundColor = DEFAULT_COLOR;\r\n            arrayTiles[i].style.transition = \"100ms all\";\r\n        }\r\n    }\r\n\r\n    binarySearch() {\r\n        const { array } = this.state;\r\n        const animations = [];\r\n        let count = 0;\r\n        const arrayTiles = document.getElementsByClassName(\"b-array-bar\");\r\n        const target = document.getElementById(\"binarySearchTargetVal\").value;\r\n        if (target === \"\") return;\r\n\r\n        binarySearchAnimations(\r\n            array,\r\n            0,\r\n            array.length - 1,\r\n            parseInt(target),\r\n            animations\r\n        );\r\n\r\n        for (let k = 0; k < animations.length; k++) {\r\n            const [left, right, mid, found] = animations[k];\r\n            count++;\r\n\r\n            if (k === animations.length - 1 && found) {\r\n                setTimeout(() => {\r\n                    this.setState({ disabled: true, found: true });\r\n                    this.resetAllTiles(arrayTiles);\r\n                    arrayTiles[mid].classList.add(\"highlight\");\r\n                    arrayTiles[mid].style.backgroundColor = FOUND_COLOR;\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            if (left === 0 && right === 0 && mid === 0 && !found) {\r\n                setTimeout(() => {\r\n                    console.log(\"ELement not found\");\r\n                    this.setState({\r\n                        msgAfterExecution: `Element not found`,\r\n                        found: false,\r\n                    });\r\n                    this.resetAllTiles(arrayTiles);\r\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.setState({ disabled: true });\r\n                this.resetAllTiles(arrayTiles);\r\n                this.hightlightWithinBounds(left, right, arrayTiles);\r\n            }, k * 1000 * ANIMATION_SPEED_SECONDS);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({ disabled: false });\r\n        }, count * 1000 * ANIMATION_SPEED_SECONDS);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                    <center>\r\n                        <Header title=\"Binary Search\" />\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-1\"></div>\r\n                                <div className=\"input-group col-sm-10\">\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"binarySearchTargetVal\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Find Element\"\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            onClick={() => this.binarySearch()}\r\n                                            className=\"btn btn-success\"\r\n                                            type=\"button\"\r\n                                            id=\"binarySearchBtn\"\r\n                                            disabled={disabled}\r\n                                        >\r\n                                            Search\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => this.resetArray()}\r\n                                            className=\"btn btn-danger\"\r\n                                            id=\"binarySearchResetArray\"\r\n                                            type=\"button\"\r\n                                            disabled={disabled}\r\n                                        >\r\n                                            Reset Array\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-sm-1 \"></div>\r\n                            </div>\r\n                        </div>\r\n                        {!found ? (\r\n                            <p className=\"not-found\">{msgAfterExecution}</p>\r\n                        ) : null}\r\n                        <br />\r\n                        <div className=\"container\">\r\n                            {array.map((value, idx) => (\r\n                                <ArrayTile\r\n                                    type={\"binarySearch\"}\r\n                                    key={idx}\r\n                                    idx={idx}\r\n                                    val={value}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </center>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export function linearSearchAnimations(array, target) {\r\n    let animations = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        const ele = array[i];\r\n        const tar = parseInt(target);\r\n        if (ele === tar) {\r\n            animations.push([i, ele, true]);\r\n            break;\r\n        } else {\r\n            animations.push([i, ele, false]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function binarySearchAnimations(\r\n    array,\r\n    left,\r\n    right,\r\n    element,\r\n    animations = []\r\n) {\r\n    if (right >= left) {\r\n        let mid = parseInt(left + (right - left) / 2);\r\n        if (array[mid] === element) {\r\n            animations.push([left, right, mid, true]);\r\n            return true;\r\n        } else if (array[mid] > element) {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, left, mid - 1, element, animations);\r\n        } else {\r\n            animations.push([left, right, mid, false]);\r\n            binarySearchAnimations(array, mid + 1, right, element, animations);\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval.js\";\r\nimport { linearSearchAnimations } from \"./../searchingAlgorithms\";\r\n\r\nimport Header from \"./../../utils/header\";\r\nimport ArrayTile from \"./../arrayTile\";\r\n\r\nimport BackBar from \"./../../utils/backbar\";\r\n\r\n// Stylesheets\r\nimport \"./linearSearch.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 15;\r\nconst DEFAULT_COLOR = \"#6376f1\";\r\nconst FOUND_COLOR = \"#28B463\";\r\nconst NOT_FOUND_COLOR = \"#F16388\";\r\nconst ANIMATION_SPEED_SECONDS = 1;\r\n\r\nexport default class LinearSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            found: false,\r\n            disabled: false,\r\n            elementFoundAt: 0,\r\n            target: null,\r\n            msgAfterExecution: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        const prevArray = document.getElementsByClassName(\"l-array-bar\");\r\n        const found = false;\r\n        const disabled = false;\r\n        document.getElementById(\"targetVal\").value = \"\";\r\n        for (let idx = 0; idx < prevArray.length; idx++) {\r\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\r\n            prevArray[idx].classList.remove(\"growFind\");\r\n            prevArray[idx].classList.remove(\"highlight\");\r\n        }\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({ array, found, disabled, msgAfterExecution: \"\" });\r\n    }\r\n\r\n    linearSearch() {\r\n        var msg = \"\";\r\n        const target = document.getElementById(\"targetVal\").value;\r\n        if (target === \"\") return;\r\n        const animations = linearSearchAnimations(this.state.array, target);\r\n        console.log(animations);\r\n        let count = 0;\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [idx, currentEle, found] = animations[i];\r\n            const arrayBars = document.getElementsByClassName(\"l-array-bar\");\r\n            const arrayBar = arrayBars[idx];\r\n            const arrayBarStyle = arrayBar.style;\r\n\r\n            count++;\r\n\r\n            if (found) {\r\n                msg = `${currentEle} found at index ${idx}`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: true,\r\n                        disabled: true,\r\n                        elementFoundAt: idx,\r\n                        target: currentEle,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                    arrayBar.classList.add(\"highlight\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n                break;\r\n            } else {\r\n                msg = `${target} not found`;\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        found: false,\r\n                        disabled: true,\r\n                    });\r\n                    arrayBarStyle.backgroundColor = NOT_FOUND_COLOR;\r\n                    arrayBar.classList.add(\"growFind\");\r\n                }, i * ANIMATION_SPEED_SECONDS * 1000);\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({\r\n                disabled: false,\r\n                msgAfterExecution: msg,\r\n            });\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { array, found, disabled, msgAfterExecution } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"jumbotron jumbotron-fluid bg-light\">\r\n                    <center>\r\n                        <Header title=\"Linear Search\" />\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-1\"></div>\r\n                                <div className=\"input-group col-sm-10\">\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"targetVal\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Find Element\"\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            onClick={() => this.linearSearch()}\r\n                                            className=\"btn btn-success\"\r\n                                            type=\"button\"\r\n                                            id=\"button-addon2\"\r\n                                            disabled={disabled}\r\n                                        >\r\n                                            Search\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => this.resetArray()}\r\n                                            className=\"btn btn-danger\"\r\n                                            id=\"resetArray\"\r\n                                            type=\"button\"\r\n                                            disabled={disabled}\r\n                                        >\r\n                                            Reset Array\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-sm-1 \"></div>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        {!found ? (\r\n                            <p className=\"found growFind\">\r\n                                {msgAfterExecution}\r\n                            </p>\r\n                        ) : null}\r\n                        <div className=\"container\">\r\n                            {array.map((value, idx) => (\r\n                                <ArrayTile\r\n                                    type={`linearSearch`}\r\n                                    key={idx}\r\n                                    idx={idx}\r\n                                    val={value}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </center>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/*\r\n-----------------------\r\nBACKTRACKING ALGORITHMS\r\n-----------------------\r\n*/\r\n\r\n/* -----------------------\r\nN Queen Problem Algorithms\r\n-------------------------- */\r\n\r\nfunction createBoard(size) {\r\n    const board = [];\r\n    for (let i = 0; i < size; i++) {\r\n        board.push(getRowsOfZeroes(size));\r\n    }\r\n    return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n    const board = createBoard(size);\r\n    solveNQueenUtil(board, 0, animations);\r\n    return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n    let N = board.length;\r\n\r\n    if (col >= N) return true;\r\n\r\n    for (let i = 0; i < N; i++) {\r\n        if (isSafe(board, i, col)) {\r\n            board[i][col] = true;\r\n            animations.push([i, col, true]);\r\n            if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n            board[i][col] = false;\r\n            animations.push([i, col, false]);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n    let N = board.length;\r\n\r\n    for (let i = 0; i < col; i++) {\r\n        if (board[row][i] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n    for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n        if (board[i][j] === true) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n    const row = [];\r\n    for (let i = 0; i < size; i++) {\r\n        row.push(false);\r\n    }\r\n    return row;\r\n}\r\n\r\n/* ----------------------\r\nRat In A Maze Solving Algorithms\r\n------------------------- */\r\n\r\nfunction isRatSafe(maze = [], x, y) {\r\n    let mazeRows = maze.length;\r\n    let mazeCols = maze[0].length;\r\n\r\n    return x >= 0 && x < mazeRows && y >= 0 && y < mazeCols && maze[x][y] === 1;\r\n}\r\n\r\nfunction solveRatInAMaze(maze = [], x, y, sol = [], animations = []) {\r\n    let endOfMazeX = maze.length - 1;\r\n    let endOfMazeY = maze[0].length - 1;\r\n\r\n    // Goal State || Base Case\r\n    if (x === endOfMazeX && y === endOfMazeY && maze[x][y] === 1) {\r\n        sol[x][y] = 1;\r\n        animations.push([x, y, true]);\r\n        return true;\r\n    }\r\n\r\n    // Check if maze is valid\r\n    if (isRatSafe(maze, x, y)) {\r\n        animations.push([x, y, true]);\r\n        sol[x][y] = 1;\r\n\r\n        // Move Down\r\n        if (solveRatInAMaze(maze, x, y + 1, sol, animations)) return true;\r\n        // Move Right\r\n        if (solveRatInAMaze(maze, x + 1, y, sol, animations)) return true;\r\n        // No Move is Possible -> Backtrack\r\n        else {\r\n            animations.push([x, y, false]);\r\n            sol[x][y] = 0;\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function solveMaze(maze = [], sol = []) {\r\n    const animations = [];\r\n    if (!solveRatInAMaze(maze, 0, 0, sol, animations)) {\r\n        console.log(\"Solution doesn't\");\r\n        return [sol, []];\r\n    }\r\n    return [sol, animations];\r\n}\r\n\r\nexport function prepareSolutionBoardOfZeroes(size) {\r\n    let sol = [];\r\n    for (let i = 0; i < size; i++) {\r\n        var temp = [];\r\n        for (let j = 0; j < size; j++) {\r\n            temp.push(0);\r\n        }\r\n        sol.push(temp);\r\n    }\r\n    return sol;\r\n}\r\n","import React from \"react\";\r\nimport crown from \"./../nQueensProblem/crown.png\";\r\n\r\nimport { getNQueensAnimations } from \"./../backTrackingAlgorithms\";\r\n\r\nimport BackBar from './../../utils/backbar'\r\n\r\n// Stylesheets\r\nimport \"./../../utils/animate.min.css\";\r\nimport \"./nQueensProblem.css\";\r\n\r\nconst SIZE_OF_BOARD = 4;\r\nvar ANIMATION_SPEED_SECONDS = 1.5;\r\n\r\nconst CELL_COLOR = \"#BFC9CA\";\r\nconst SAFE_COLOR = \"#DC143C\";\r\nconst CROWN_COLOR = \"#FFFFFF\";\r\nconst SAFE = \"#2ECC71\";\r\n\r\nexport default class NQueensProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { disabled: false };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(SIZE_OF_BOARD);\r\n    }\r\n\r\n    drawBoard(SIZE) {\r\n        // This function draws the NxN board and according to the size applies styling which makes easier to visualise huge sized boards on small screens.\r\n        let padding = 0;\r\n        let fontSize = 0;\r\n\r\n        // Deleting the previous board cells and results section for new start\r\n        document.getElementById(\"nQueensBoard\").innerHTML = \"\";\r\n        document.getElementById(\"NQueenResults\").innerHTML = \"\";\r\n\r\n        // Calculating the board size and style values\r\n        switch (SIZE) {\r\n            case 4:\r\n                padding = 20;\r\n                fontSize = 30;\r\n                ANIMATION_SPEED_SECONDS = 1.5;\r\n                break;\r\n            case 5:\r\n            case 6:\r\n                padding = 10;\r\n                fontSize = 25;\r\n                ANIMATION_SPEED_SECONDS = 1;\r\n                break;\r\n            case 7:\r\n                padding = 7;\r\n                fontSize = 20;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            case 8:\r\n                padding = 7;\r\n                fontSize = 18;\r\n                ANIMATION_SPEED_SECONDS = 0.5;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        // creating the board\r\n        const container = document.getElementById(\"nQueensBoard\");\r\n\r\n        // Adding Rows and Columns to the board\r\n        container.style.setProperty(\"--Qgrid-rows\", SIZE);\r\n        container.style.setProperty(\"--Qgrid-cols\", SIZE);\r\n\r\n        // Adding cells to the board\r\n        for (let j = 0; j < SIZE * SIZE; j++) {\r\n            let cell = document.createElement(\"div\");\r\n            let item = document.createElement(\"i\");\r\n\r\n            cell.appendChild(item).className = \"fas fa-crown\";\r\n            container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\r\n        }\r\n\r\n        // Styling the cells\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n        const crownsI = document.getElementsByClassName(\"fa-crown\");\r\n        for (let l = 0; l < arrayTiles.length; l++) {\r\n            arrayTiles[l].style.padding = `${padding}px`;\r\n            arrayTiles[l].style.backgroundColor = CELL_COLOR;\r\n            crownsI[l].style.fontSize = `${fontSize}px`;\r\n            crownsI[l].style.color = CELL_COLOR;\r\n        }\r\n\r\n        // Since everything is just created dynamically we have to apply styles\r\n        // one by one to each element because depending on the board size we are\r\n        // determining the corressponding styles.\r\n    }\r\n\r\n    NQueensProblem() {\r\n        // Getting the size from the input box\r\n        let size = parseInt(document.getElementById(\"boardInput\").value);\r\n\r\n        // checking if size is greater than 3 because no solutions exist for n <= 3\r\n        // checking if size is lesser than 17 because the user's RAM will be\r\n        // used heavily for greater sizes and page can be unresponsive.\r\n        if (size < 4 || size > 8) {\r\n            alert(\"Board Size must be between 4 and 8\");\r\n            return;\r\n        }\r\n        // finally drawing the board\r\n        this.drawBoard(size);\r\n\r\n        // getting the cells for visualisations\r\n        const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n\r\n        // getting the crown element inside the cell\r\n        const crown = document.getElementsByClassName(\"fa-crown\");\r\n\r\n        // getting the results div\r\n        const resultsDiv = document.getElementById(\"NQueenResults\");\r\n\r\n        // getting the Animations for NQueens.\r\n        const NQueensAnimations = [];\r\n        getNQueensAnimations(size, NQueensAnimations);\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < NQueensAnimations.length; i++) {\r\n            count++;\r\n\r\n            // Disabling all the input sources untill Algorithm is finished.\r\n            this.setState({ disabled: true });\r\n\r\n            const [row, col, isQueenSafe] = NQueensAnimations[i];\r\n            const idx = size * row + col;\r\n\r\n            // Creating an alert message for Progress Section\r\n            let alert = document.createElement(\"div\");\r\n            alert.classList.add(\"alert\");\r\n            alert.classList.add(\"animate__animated\");\r\n            alert.classList.add(\"animate__slideInDown\");\r\n\r\n            setTimeout(() => {\r\n                // checking if this is a valid position\r\n                if (isQueenSafe) {\r\n                    // valid positions are highlighted as RED which is royal\r\n                    arrayTiles[idx].style.backgroundColor = SAFE_COLOR;\r\n                    arrayTiles[idx].classList.add(\"safe-queen\");\r\n\r\n                    // making the crown visible\r\n                    crown[idx].style.color = CROWN_COLOR;\r\n                    // popping up the crown with an effect\r\n                    crown[idx].classList.add(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\r\n                    alert.classList.add(\"alert-success\");\r\n                } else {\r\n                    // invalid positions are highlighted as default board color\r\n                    arrayTiles[idx].style.backgroundColor = CELL_COLOR;\r\n                    arrayTiles[idx].classList.remove(\"safe-queen\");\r\n\r\n                    // making the crown invisible\r\n                    crown[idx].style.color = CELL_COLOR;\r\n                    // removing the popup animation\r\n                    crown[idx].classList.remove(\"popupQueen\");\r\n\r\n                    // Adding the alert message for results div\r\n                    alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\r\n                    alert.classList.add(\"alert-danger\");\r\n                }\r\n                // adding alert to results div\r\n                resultsDiv.prepend(alert);\r\n                // adding a transition for color change\r\n                arrayTiles[idx].style.transition = \"200ms all\";\r\n            }, ANIMATION_SPEED_SECONDS * 1000 * i);\r\n            // looping according to animation speeds\r\n        }\r\n\r\n        // getting the queens at final safe positions\r\n        const trueValues = document.getElementsByClassName(\"safe-queen\");\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < trueValues.length; i++) {\r\n                trueValues[i].style.backgroundColor = SAFE;\r\n                trueValues[i].style.transition = \"300ms all\";\r\n\r\n                // Enabling the input sources for another visualization\r\n                this.setState({ disabled: false });\r\n\r\n                // This means we have reached at final positions with Queens placed\r\n                // on Valid positions\r\n                if (i === trueValues.length - 1) {\r\n                    // Adding final alert message\r\n                    let alert = document.createElement(\"div\");\r\n                    alert.classList.add(\"alert\");\r\n                    alert.classList.add(\"animate__animated\");\r\n                    alert.classList.add(\"animate__slideInUp\");\r\n                    alert.innerHTML = `All Queens have been placed on Valid positions`;\r\n                    alert.classList.add(\"alert-primary\");\r\n\r\n                    // Prepending the alert message\r\n                    resultsDiv.prepend(alert);\r\n                }\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\r\n    }\r\n\r\n    render() {\r\n        const { disabled } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-12\">\r\n                                    <center>\r\n                                        <h2>\r\n                                            <img\r\n                                                className=\"mb-2\"\r\n                                                src={crown}\r\n                                                width=\"40px\"\r\n                                                alt={\"\"}\r\n                                            />{\" \"}\r\n                                            N-Queens Visualiser\r\n                                        </h2>\r\n                                    </center>\r\n                                </div>\r\n                            </div>\r\n                            <div\r\n                                className=\"Qbox Qboard mb-2\"\r\n                                id=\"nQueensBoard\"\r\n                            ></div>\r\n                            <div className=\"row\">\r\n                                <div className=\"input-group mt-1 container col-sm-6\">\r\n                                    <div className=\"input-group-prepend\">\r\n                                        <span className=\"input-group-text\">\r\n                                            Board Size\r\n                                        </span>\r\n                                    </div>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        id=\"boardInput\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Board Size\"\r\n                                        defaultValue=\"4\"\r\n                                        readOnly={disabled}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            className=\"btn btn-secondary\"\r\n                                            disabled={disabled}\r\n                                            onClick={() =>\r\n                                                this.NQueensProblem()\r\n                                            }\r\n                                        >\r\n                                            Visualise N-Queens\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {!disabled ? (\r\n                                <center>\r\n                                    <small className=\"text-muted\">\r\n                                        <div className=\"mt-2\"></div>\r\n                                        The Visualiser works best for board\r\n                                        sizes between 4 and 8 inclusive. Larger\r\n                                        board sizes would make the page\r\n                                        unresponsive because of huge number of\r\n                                        computations. &nbsp;\r\n                                        <a href=\"https://github.com/dipeshpatil/algorithms-visualiser/tree/master/src/backTrackingAlgorithms\">\r\n                                            GitHub Repo for this project\r\n                                        </a>\r\n                                    </small>\r\n                                </center>\r\n                            ) : null}\r\n                        </div>\r\n                        <div id=\"NQueenResults\" className=\"col-sm-4 mt-3\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const MAZES = [\r\n    [\r\n        [1, 1, 0, 0, 1, 1, 1, 0],\r\n        [1, 0, 1, 1, 0, 1, 1, 1],\r\n        [1, 1, 1, 1, 0, 0, 1, 1],\r\n        [0, 0, 0, 1, 1, 1, 0, 0],\r\n        [1, 1, 1, 1, 0, 0, 1, 1],\r\n        [0, 0, 0, 1, 1, 1, 1, 0],\r\n        [1, 1, 0, 0, 0, 0, 1, 1],\r\n        [1, 0, 1, 1, 0, 0, 1, 1],\r\n    ],\r\n    [\r\n        [1, 1, 1, 1, 1, 1, 1, 1],\r\n        [0, 0, 1, 0, 0, 1, 1, 1],\r\n        [0, 0, 1, 0, 0, 1, 0, 0],\r\n        [0, 1, 1, 1, 0, 1, 0, 0],\r\n        [0, 0, 0, 1, 1, 1, 1, 1],\r\n        [1, 0, 0, 0, 1, 0, 0, 1],\r\n        [1, 0, 1, 1, 1, 0, 0, 1],\r\n        [1, 0, 0, 0, 0, 0, 0, 1],\r\n    ],\r\n    [\r\n        [1, 1, 1, 1, 0, 1, 1, 1],\r\n        [1, 0, 0, 0, 1, 0, 0, 0],\r\n        [1, 0, 0, 0, 1, 1, 1, 1],\r\n        [1, 1, 1, 0, 0, 0, 0, 0],\r\n        [1, 0, 1, 0, 0, 0, 0, 0],\r\n        [1, 0, 1, 1, 1, 1, 1, 1],\r\n        [1, 0, 1, 0, 0, 0, 0, 0],\r\n        [1, 1, 1, 1, 1, 1, 1, 1],\r\n    ],\r\n];\r\n\r\nexport default MAZES;\r\n","import React from \"react\";\r\n\r\nimport BackBar from \"./../../utils/backbar\";\r\n\r\nimport {\r\n    solveMaze,\r\n    prepareSolutionBoardOfZeroes,\r\n} from \"./../backTrackingAlgorithms\";\r\nimport { randomIntFromInterval } from \"./../../utils/randomIntFromInterval\";\r\n// Stylesheets\r\nimport \"./ratInAMaze.css\";\r\n\r\nimport MAZES from \"./arrayofMazes\";\r\n\r\nconst MAZE = MAZES[randomIntFromInterval(0, MAZES.length - 1)];\r\n// const MAZE = MAZES[2];\r\nconst SOL = prepareSolutionBoardOfZeroes(MAZE.length);\r\n\r\nconst NO_PATH_COLOR = \"#ededed\";\r\nconst PATH_COLOR = \"#ADD2FE\";\r\nconst SAFE_COLOR = \"#B0FCEF\";\r\n\r\nconst ANIMATION_SPEED_MS = 1000;\r\n\r\nexport default class RatInAMazeProblem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawBoard(MAZE);\r\n    }\r\n\r\n    testAlgo() {\r\n        const sol = solveMaze(MAZE, SOL, []);\r\n\r\n        const animations = sol[1];\r\n        const solution = sol[0];\r\n\r\n        const blocks = document.getElementsByClassName(\"r-array-tile\");\r\n        const rat = document.getElementsByClassName(\"rat\");\r\n        let count = 0;\r\n\r\n        const finalPath = [];\r\n        for (let i = 0; i < solution.length; i++) {\r\n            for (let j = 0; j < solution.length; j++) {\r\n                let idx = MAZE.length * i + j;\r\n                if (solution[i][j] === 1) {\r\n                    finalPath.push(idx);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [x, y, isRatSafe] = animations[i]; // current\r\n            const idx = x * MAZE.length + y;\r\n            const blockStyle = blocks[idx].style;\r\n\r\n            setTimeout(() => {\r\n                if (isRatSafe) {\r\n                    blockStyle.backgroundColor = SAFE_COLOR;\r\n                    rat[idx].innerHTML = \"🐀\";\r\n                    rat[idx].classList.add(\"flipH\");\r\n                } else {\r\n                    blockStyle.backgroundColor = PATH_COLOR;\r\n                    rat[idx].innerHTML = \"\";\r\n                    rat[idx].classList.remove(\"flipH\");\r\n                }\r\n            }, i * ANIMATION_SPEED_MS);\r\n            count = i;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < finalPath.length; i++) {\r\n                setTimeout(() => {\r\n                    blocks[finalPath[i]].classList.add(\"highlightPath\");\r\n                }, i * 40);\r\n            }\r\n        }, (count + 1) * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    drawBoard(MAZE = []) {\r\n        const ROWS = MAZE.length;\r\n        const COLS = MAZE[0].length;\r\n\r\n        const maze = document.getElementById(\"ratMazeBoard\");\r\n        maze.innerHTML = \"\";\r\n\r\n        maze.style.setProperty(\"--Rgrid-rows\", ROWS);\r\n        maze.style.setProperty(\"--Rgrid-cols\", COLS);\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            for (let j = 0; j < COLS; j++) {\r\n                let cell = document.createElement(\"div\");\r\n                let item = document.createElement(\"i\");\r\n                let cellStyle = cell.style;\r\n                cell.appendChild(item).className = \"fas rat\";\r\n\r\n                if (i === 0 && j === 0) {\r\n                    cell.appendChild(item).classList.add(\"flipH\");\r\n                    item.innerHTML = \"🐀\";\r\n                }\r\n\r\n                if (i === ROWS - 1 && j === COLS - 1) {\r\n                    cell.appendChild(item).classList.add(\"flipH\");\r\n                    item.innerHTML = \"🚪\";\r\n                }\r\n\r\n                if (MAZE[i][j] === 1) {\r\n                    cellStyle.backgroundColor = PATH_COLOR;\r\n                } else {\r\n                    cellStyle.backgroundColor = NO_PATH_COLOR;\r\n                }\r\n\r\n                maze.appendChild(cell).className = \"Rgrid-item r-array-tile\";\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <h2 className=\"text-center mt-2\">Rat In A Maze</h2>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7\">\r\n                            <div\r\n                                className=\"Rbox Rboard mt-2\"\r\n                                id=\"ratMazeBoard\"\r\n                            ></div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 mt-2\">\r\n                            <button\r\n                                onClick={() => this.testAlgo()}\r\n                                className=\"btn btn-sm btn-primary\"\r\n                            >\r\n                                Visualize Algorithm\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends React.Component {\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onNodeClick,\r\n            onNodeOver,\r\n            onNodeOut,\r\n        } = this.props;\r\n\r\n        const extraClassName = isFinish\r\n            ? \"node-finish\"\r\n            : isStart\r\n            ? \"node-start\"\r\n            : isWall\r\n            ? \"node-wall\"\r\n            : \"\";\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName} `}\r\n                onClick={() => onNodeClick(row, col)}\r\n                onMouseOver={() => onNodeOver(row, col)}\r\n                onMouseOut={() => onNodeOut(row, col)}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n","export function convert1Dto2DArray(OneDArray, ROWS, COLS) {\r\n    const twoDArray = [];\r\n    for (let i = 0; i < ROWS; i++) {\r\n        const oneDRow = [];\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { col, row } = OneDArray[i * ROWS + j];\r\n            if (i === row && j === col) {\r\n                oneDRow.push(OneDArray[i * ROWS + j]);\r\n            }\r\n        }\r\n        twoDArray.push(oneDRow);\r\n    }\r\n    return twoDArray;\r\n}\r\n\r\nexport function convert2Dto1DArray(TwoDArray) {\r\n    const OneDArray = [];\r\n    for (let i = 0; i < TwoDArray.length; i++) {\r\n        for (let j = 0; j < TwoDArray[i].length; j++) {\r\n            OneDArray.push(TwoDArray[i][j]);\r\n        }\r\n    }\r\n    return OneDArray;\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n\r\n    while (!!unvisitedNodes.length) {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode = unvisitedNodes.shift();\r\n\r\n        if (closestNode.isWall) continue;\r\n\r\n        if (closestNode.distance === Infinity)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode === finishNode)\r\n        return [visitedNodesInOrder, calculatePath(finishNode)];\r\n        updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function getAllNodes(grid = []) {\r\n    const nodes = [];\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[0].length; j++) {\r\n            nodes.push(grid[i][j]);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        neighbor.distance = node.distance + 1;\r\n        neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n","export function bfs(grid = [], startNode, finishNode) {\r\n    const queue = [];\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.isVisited = true;\r\n    queue.push(startNode);\r\n\r\n    while (!!queue.length) {\r\n        let node = queue.shift();\r\n\r\n        if (finishNode === node)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n\r\n        if (node.isWall) continue;\r\n\r\n        const neighbors = getAllNeighbors(grid, node);\r\n\r\n        for (const neighbor of neighbors) {\r\n            neighbor.isVisited = true;\r\n            neighbor.previousNode = node;\r\n            visitedNodesInOrder.push(neighbor);\r\n            queue.push(neighbor);\r\n        }\r\n    }\r\n\r\n    return [visitedNodesInOrder, calculatePath(finishNode)];\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n","export function dfs(grid = [], startNode, finishNode) {\r\n    const stack = [];\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.isVisited = true;\r\n    stack.push(startNode);\r\n\r\n    while (!!stack.length) {\r\n        let node = stack.pop();\r\n\r\n        if (finishNode === node)\r\n            return [visitedNodesInOrder, calculatePath(finishNode)];\r\n\r\n        if (node.isWall) continue;\r\n\r\n        const neighbors = getAllNeighbors(grid, node);\r\n\r\n        for (const neighbor of neighbors) {\r\n            neighbor.isVisited = true;\r\n            neighbor.previousNode = node;\r\n            visitedNodesInOrder.push(neighbor);\r\n            stack.push(neighbor);\r\n        }\r\n    }\r\n\r\n    return [visitedNodesInOrder, calculatePath(finishNode)];\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n","export function astar(grid = [], startNode, finishNode) {\r\n    const closedlist = [];\r\n    const openlist = [];\r\n\r\n    startNode.cost = {\r\n        F: 0,\r\n        G: 0,\r\n        H: 0,\r\n    };\r\n\r\n    openlist.push(startNode);\r\n\r\n    while (!!openlist.length) {\r\n        openlist.sort((a, b) => a.cost.F - b.cost.F);\r\n        const current = openlist.shift();\r\n\r\n        closedlist.push(current);\r\n\r\n        if (current.isWall) continue;\r\n\r\n        if (current === finishNode)\r\n            return [closedlist, calculatePath(finishNode)];\r\n\r\n        const neighbors = getNeighbors(grid, current);\r\n\r\n        for (let i = 0; i < neighbors.length; i++) {\r\n            const nNode = neighbors[i];\r\n            if (closedlist.includes(nNode)) continue;\r\n\r\n            nNode.cost.G = calculateCost(nNode, startNode, \"E\");\r\n            nNode.cost.H = calculateCost(nNode, finishNode, \"E\");\r\n            nNode.cost.F = nNode.cost.G + nNode.cost.H;\r\n\r\n            if (!openlist.includes(nNode)) {\r\n                nNode.previousNode = current;\r\n                openlist.push(nNode);\r\n            }\r\n        }\r\n    }\r\n    return [closedlist, calculatePath(finishNode)];\r\n}\r\n\r\nfunction calculateCost(currentNode, node, distanceType) {\r\n    switch (distanceType) {\r\n        // Euclidean Distance\r\n        case \"E\":\r\n            return Math.floor(\r\n                Math.sqrt(\r\n                    Math.pow(currentNode.row - node.row, 2) +\r\n                        Math.pow(currentNode.col - node.col, 2)\r\n                ) * 10\r\n            );\r\n\r\n        // Manhattan Distance\r\n        case \"M\":\r\n            return (\r\n                Math.abs(currentNode.row - node.row) +\r\n                Math.abs(currentNode.col - node.col)\r\n            );\r\n\r\n        // Diagonal Distance\r\n        case \"D\":\r\n            return Math.max(\r\n                Math.abs(currentNode.row - node.row),\r\n                Math.abs(currentNode.col - node.col)\r\n            );\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nfunction getNeighbors(grid = [], currentNode) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n    const { row, col } = currentNode;\r\n    const neighbors = [];\r\n\r\n    // Top, Left, Right, Bottom Nodes\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    // Diagonal Nodes\r\n    // if (\r\n    //     row - 1 >= 0 &&\r\n    //     row - 1 < ROWS &&\r\n    //     col - 1 >= 0 &&\r\n    //     col - 1 < COLS &&\r\n    //     !grid[row - 1][col - 1].isWall\r\n    // ) {\r\n    //     neighbors.push(grid[row - 1][col - 1]);\r\n    // }\r\n    // if (\r\n    //     row - 1 >= 0 &&\r\n    //     row - 1 < ROWS &&\r\n    //     col + 1 >= 0 &&\r\n    //     col + 1 < COLS &&\r\n    //     !grid[row - 1][col + 1].isWall\r\n    // ) {\r\n    //     neighbors.push(grid[row - 1][col + 1]);\r\n    // }\r\n    // if (\r\n    //     row + 1 >= 0 &&\r\n    //     row + 1 < ROWS &&\r\n    //     col - 1 >= 0 &&\r\n    //     col - 1 < COLS &&\r\n    //     !grid[row + 1][col - 1].isWall\r\n    // ) {\r\n    //     neighbors.push(grid[row + 1][col - 1]);\r\n    // }\r\n    // if (\r\n    //     row + 1 >= 0 &&\r\n    //     row + 1 < ROWS &&\r\n    //     col + 1 >= 0 &&\r\n    //     col + 1 < COLS &&\r\n    //     !grid[row + 1][col + 1].isWall\r\n    // ) {\r\n    //     neighbors.push(grid[row + 1][col + 1]);\r\n    // }\r\n\r\n    return neighbors;\r\n}\r\n\r\nfunction calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n","export function bidirectionalSearch(grid = [], startNode, finishNode) {\r\n    const squeue = [];\r\n    const dqueue = [];\r\n\r\n    const svisited = [],\r\n        dvisited = [];\r\n\r\n    startNode.isVisited = true;\r\n    startNode.previousNode = null;\r\n    squeue.push(startNode);\r\n\r\n    finishNode.isVisited = true;\r\n    finishNode.previousNode = null;\r\n    dqueue.push(finishNode);\r\n\r\n    while (squeue.length && dqueue.length) {\r\n        const currsn = squeue.shift();\r\n        const currdn = dqueue.shift();\r\n\r\n        const sneighbors = getAllNeighbors(grid, currsn);\r\n        const dneighbors = getAllNeighbors(grid, currdn);\r\n\r\n        if (currdn === currsn) break;\r\n\r\n        for (const sneighbor of sneighbors) {\r\n            if (!sneighbor.isVisited) {\r\n                sneighbor.isVisited = true;\r\n                sneighbor.previousNode = currsn;\r\n                squeue.push(sneighbor);\r\n                svisited.push(sneighbor);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (const dneighbor of dneighbors) {\r\n            if (!dneighbor.isVisited) {\r\n                dneighbor.isVisited = true;\r\n                dneighbor.previousNode = currdn;\r\n                dqueue.push(dneighbor);\r\n                dvisited.push(dneighbor);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const sourcePaths = [],\r\n        destPaths = [];\r\n\r\n    for (let i = 0; i < svisited.length; i++)\r\n        sourcePaths.push(calculatePath(svisited[i]));\r\n\r\n    for (let i = 0; i < dvisited.length; i++)\r\n        destPaths.push(calculatePath(dvisited[i]));\r\n\r\n    for (let i = sourcePaths.length - 1; i >= 0; i--) {\r\n        const sPathRow = sourcePaths[i];\r\n        const splast = sPathRow[sPathRow.length - 1];\r\n        const neighbors = getAdjacents(grid, splast);\r\n        for (const neighbor of neighbors) {\r\n            for (let j = 0; j < destPaths.length; j++) {\r\n                const destPathRow = destPaths[j];\r\n                if (destPathRow.includes(neighbor)) {\r\n                    return [svisited, dvisited, sPathRow, destPathRow];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getAdjacents(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n\r\nfunction getAllNeighbors(grid = [], node) {\r\n    const ROWS = grid.length;\r\n    const COLS = grid[0].length;\r\n\r\n    const { row, col } = node;\r\n    const neighbors = [];\r\n\r\n    if (\r\n        row + 1 >= 0 &&\r\n        row + 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row + 1][col].isVisited &&\r\n        !grid[row + 1][col].isWall\r\n    ) {\r\n        neighbors.push(grid[row + 1][col]);\r\n    }\r\n    if (\r\n        row - 1 >= 0 &&\r\n        row - 1 < ROWS &&\r\n        col >= 0 &&\r\n        col < COLS &&\r\n        !grid[row - 1][col].isWall &&\r\n        !grid[row - 1][col].isVisited\r\n    ) {\r\n        neighbors.push(grid[row - 1][col]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col - 1 >= 0 &&\r\n        col - 1 < COLS &&\r\n        !grid[row][col - 1].isWall &&\r\n        !grid[row][col - 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col - 1]);\r\n    }\r\n    if (\r\n        row >= 0 &&\r\n        row < ROWS &&\r\n        col + 1 >= 0 &&\r\n        col + 1 < COLS &&\r\n        !grid[row][col + 1].isWall &&\r\n        !grid[row][col + 1].isVisited\r\n    ) {\r\n        neighbors.push(grid[row][col + 1]);\r\n    }\r\n\r\n    return neighbors;\r\n}\r\n\r\nexport function calculatePath(finishNode) {\r\n    const shortestPathNodes = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        shortestPathNodes.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return shortestPathNodes;\r\n}\r\n","function getNodeNeighbors(row, col, ROWS, COLS) {\r\n    const nodeArray = [];\r\n    for (let i = 0, j = 0; i < ROWS || j < COLS; i++, j++) {\r\n        nodeArray.push([row, i]);\r\n        nodeArray.push([j, col]);\r\n    }\r\n    return nodeArray;\r\n}\r\n\r\nexport function highlightGrid(row, col, ROWS, COLS) {\r\n    const nodeArray = getNodeNeighbors(row, col, ROWS, COLS);\r\n    for (const nodeVal of nodeArray) {\r\n        const [nRow, nCol] = nodeVal;\r\n        const node = document.getElementById(`node-${nRow}-${nCol}`);\r\n\r\n        if (nRow === parseInt(ROWS / 2)) {\r\n            node.classList.add(\"plus-center\");\r\n        } else {\r\n            node.classList.add(\"plus\");\r\n        }\r\n\r\n        if (nCol === parseInt(COLS / 2)) {\r\n            node.classList.add(\"plus-center\");\r\n        } else {\r\n            node.classList.add(\"plus\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function unHighlightGrid(row, col, ROWS, COLS) {\r\n    const nodeArray = getNodeNeighbors(row, col, ROWS, COLS);\r\n    for (const nodeVal of nodeArray) {\r\n        const [nRow, nCol] = nodeVal;\r\n        const node = document.getElementById(`node-${nRow}-${nCol}`);\r\n\r\n        if (nRow === parseInt(ROWS / 2)) {\r\n            node.classList.remove(\"plus-center\");\r\n        } else {\r\n            node.classList.remove(\"plus\");\r\n        }\r\n\r\n        if (nCol === parseInt(COLS / 2)) {\r\n            node.classList.remove(\"plus-center\");\r\n        } else {\r\n            node.classList.remove(\"plus\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function highlightGridDiagonals(nodes = [], ROWS, COLS) {\r\n    for (let i = 0; i < ROWS; i++) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { row, col } = nodes[i][j];\r\n            if (row === col) {\r\n                document\r\n                    .getElementById(`node-${row}-${col}`)\r\n                    .classList.add(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n    for (let i = ROWS - 1; i >= 0; i--) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            if (i + j === parseInt((ROWS - 1 + COLS) / 2)) {\r\n                document\r\n                    .getElementById(`node-${i}-${j}`)\r\n                    .classList.add(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function unHighlightGridDiagonals(nodes = [], ROWS, COLS) {\r\n    for (let i = 0; i < ROWS; i++) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            const { row, col } = nodes[i][j];\r\n            if (row === col) {\r\n                document\r\n                    .getElementById(`node-${row}-${col}`)\r\n                    .classList.remove(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n    for (let i = ROWS - 1; i >= 0; i--) {\r\n        for (let j = 0; j < COLS; j++) {\r\n            if (i + j === parseInt((ROWS - 1 + COLS) / 2)) {\r\n                document\r\n                    .getElementById(`node-${i}-${j}`)\r\n                    .classList.remove(\"plus-center\");\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Legend = () => (\r\n    <div id=\"legend\" className=\"mt-2 mb-2\">\r\n        <div id=\"legendRow\" className=\"row p-2\">\r\n            <div className=\"col-6\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-start\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">Source</div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-wall\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">Wall</div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-visited\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">Visited</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-finish\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">\r\n                            Destination\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-path\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">Path</div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"legend legend-shortest-path\"></div>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        <div className=\"text-dark font-weight-bold legend-label\">\r\n                            Shortest Path\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Legend;\r\n","import React from \"react\";\r\n\r\nconst ComplexityTable = () => (\r\n    <div id=\"complexityTableP\">\r\n        <table className=\"table-bordered table table-striped text-center rounded-b mt-2  table-light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Algorithm</th>\r\n                    <th>Time</th>\r\n                    <th>Space</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td className=\"text-primary\">Dijkstras</td>\r\n                    <td>O(E + V&times;LogV)</td>\r\n                    <td>O(V)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">BFS</td>\r\n                    <td>\r\n                        O(V + E) = O(b<sup>d</sup>)\r\n                    </td>\r\n                    <td>\r\n                        O(V) = O(b<sup>d</sup>)\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">A* Search</td>\r\n                    <td>O(E)</td>\r\n                    <td>O(V)</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className=\"text-primary\">Bi-Directional Search</td>\r\n                    <td>\r\n                        O(b<sup>d/2</sup>)\r\n                    </td>\r\n                    <td>\r\n                        O(b<sup>d/2</sup>)\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);\r\n\r\nexport default ComplexityTable;\r\n","import React from \"react\";\r\n\r\n// Importing Node Component to display Node on Grid\r\nimport Node from \"./Node/Node\";\r\n\r\n// Array Conversion Functions\r\nimport {\r\n    convert1Dto2DArray,\r\n    convert2Dto1DArray,\r\n} from \"./pathfinder-utils/arrayConversions\";\r\n\r\n// Pathfinding Algorithms\r\nimport { dijkstra } from \"./pathFindingAlgorithms/dijkstra\";\r\nimport { bfs } from \"./pathFindingAlgorithms/breadthFirstSearch\";\r\nimport { dfs } from \"./pathFindingAlgorithms/depthFirstSearch\";\r\nimport { astar } from \"./pathFindingAlgorithms/astar\";\r\nimport { bidirectionalSearch } from \"./pathFindingAlgorithms/bidirectionalSearch\";\r\n\r\n// Maze Generation Algorithm\r\nimport { generateMaze } from \"./generateMaze\";\r\n\r\nimport BackBar from \"./../utils/backbar\";\r\n\r\n// Highlight Board Functions\r\nimport {\r\n    highlightGrid,\r\n    unHighlightGrid,\r\n    highlightGridDiagonals,\r\n    unHighlightGridDiagonals,\r\n} from \"./pathfinder-utils/highlightMazeNodes\";\r\n\r\n// Legend Component\r\nimport Legend from \"./pathfinder-utils/legend\";\r\n\r\n// Complexity table\r\nimport ComplexityTable from \"./pathfinder-utils/complexityTable\";\r\n\r\n//Stylesheets\r\nimport \"./pathfinderVisualiser.css\";\r\n\r\nconst x = 3;\r\nconst ROWS = 46 - x;\r\nconst COLS = 46 - x;\r\n\r\n// Constants to toggle Start/Finish/Wall on Grid\r\nconst START_NODE_STATE = 1;\r\nconst END_NODE_STATE = 2;\r\nconst WALL_NODE_STATE = 3;\r\n\r\nconst SPEED = 25;\r\n\r\nexport default class PathFinderVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            modifyingNodeState: 0,\r\n            START_NODE_ROW: 2,\r\n            START_NODE_COL: 2,\r\n            FINISH_NODE_ROW: ROWS - 3,\r\n            FINISH_NODE_COL: COLS - 3,\r\n            disableMazesButton: false,\r\n            disableNodesButton: false,\r\n            disableClearMazeButton: false,\r\n\r\n            highlightMazeNodes: true,\r\n            isGridDiagonalsHighlighted: false,\r\n            speed: SPEED,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setUpGrid();\r\n    }\r\n\r\n    setUpGrid() {\r\n        const grid = [];\r\n\r\n        const gridBox = document.getElementById(\"grid\");\r\n        gridBox.style.setProperty(\"--p-grid-rows\", ROWS);\r\n        gridBox.style.setProperty(\"--p-grid-cols\", COLS);\r\n\r\n        for (let i = 0; i < ROWS; i++)\r\n            for (let j = 0; j < COLS; j++) grid.push(this.createNode(i, j));\r\n\r\n        this.setState({ grid });\r\n    }\r\n\r\n    clearBoard() {\r\n        this.setUpGrid();\r\n        const grid = this.state.grid;\r\n        for (let i = 0; i < grid.length; i++) {\r\n            const node = grid[i];\r\n            document\r\n                .getElementById(`node-${node.row}-${node.col}`)\r\n                .classList.remove(\"node-visited\");\r\n            document\r\n                .getElementById(`node-${node.row}-${node.col}`)\r\n                .classList.remove(\"node-shortest-path\");\r\n        }\r\n        this.setState({\r\n            disableMazesButton: false,\r\n            disableNodesButton: false,\r\n            highlightMazeNodes: true,\r\n        });\r\n    }\r\n\r\n    selectAlgorithm() {\r\n        const algorithm = parseInt(\r\n            document.getElementById(\"pathFindingAlgoDropDown\").value\r\n        );\r\n        if (algorithm !== 0) this.visualiseAlgorithms(algorithm);\r\n        else {\r\n            alert(\"Select an Algorithm first!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    visualiseAlgorithms(algorithm) {\r\n        this.setState({\r\n            disableNodesButton: true,\r\n            disableMazesButton: true,\r\n            disableClearMazeButton: true,\r\n            modifyingNodeState: 0,\r\n        });\r\n        const {\r\n            grid,\r\n            START_NODE_COL,\r\n            START_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n        } = this.state;\r\n\r\n        const d2Grid = convert1Dto2DArray(grid, ROWS, COLS);\r\n\r\n        const STARTNODE = d2Grid[START_NODE_ROW][START_NODE_COL];\r\n        const FINISHNODE = d2Grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n\r\n        var visitedNodesInOrder, nodesInShortestPathOrder;\r\n\r\n        switch (algorithm) {\r\n            case 0:\r\n                alert(\"Select an algorithm first!\");\r\n                this.setState({\r\n                    disableMazesButton: false,\r\n                    disableNodesButton: false,\r\n                });\r\n                return;\r\n            case 1:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = dijkstra(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 2:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = bfs(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 3:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = astar(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            case 4:\r\n                const [\r\n                    source_visited,\r\n                    dest_visited,\r\n                    sPathNodes,\r\n                    dPathNodes,\r\n                ] = bidirectionalSearch(d2Grid, STARTNODE, FINISHNODE);\r\n\r\n                this.animatePath(\r\n                    source_visited,\r\n                    sPathNodes\r\n                );\r\n                this.animatePath(dest_visited, dPathNodes);\r\n\r\n                return;\r\n            case 5:\r\n                [visitedNodesInOrder, nodesInShortestPathOrder] = dfs(\r\n                    d2Grid,\r\n                    STARTNODE,\r\n                    FINISHNODE\r\n                );\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        this.animatePath(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    highlightNodes(row, col) {\r\n        if (this.state.highlightMazeNodes) {\r\n            highlightGrid(row, col, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    unHighlightNodes(row, col) {\r\n        if (this.state.highlightMazeNodes) {\r\n            unHighlightGrid(row, col, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    // change `isGridDiagonalsHighlighted` to true in state\r\n    // to highlight diagonals on board\r\n\r\n    highlightDiagonals() {\r\n        if (this.state.isGridDiagonalsHighlighted) {\r\n            const nodes = convert1Dto2DArray(\r\n                this.state.grid.slice(),\r\n                ROWS,\r\n                COLS\r\n            );\r\n            highlightGridDiagonals(nodes, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    unHighlightDiagonals() {\r\n        if (this.state.isGridDiagonalsHighlighted) {\r\n            const nodes = convert1Dto2DArray(\r\n                this.state.grid.slice(),\r\n                ROWS,\r\n                COLS\r\n            );\r\n            unHighlightGridDiagonals(nodes, ROWS, COLS);\r\n        }\r\n    }\r\n\r\n    toggleStartOrFinish(grid = [], row, col, NODE_ROW, NODE_COL, nodeType) {\r\n        const newGrid = grid.slice();\r\n\r\n        const currentNode = newGrid[ROWS * NODE_ROW + NODE_COL];\r\n        const newNode = newGrid[ROWS * row + col];\r\n\r\n        if (nodeType === \"START\") {\r\n            if (newNode.isWall || newNode.isFinish) {\r\n                return false;\r\n            } else {\r\n                currentNode.isStart = false;\r\n                newNode.isStart = true;\r\n                this.setState({\r\n                    grid: newGrid,\r\n                });\r\n                return true;\r\n            }\r\n        } else if (nodeType === \"FINISH\") {\r\n            if (newNode.isWall || newNode.isStart) {\r\n                return false;\r\n            } else {\r\n                currentNode.isFinish = false;\r\n                newNode.isFinish = true;\r\n                this.setState({\r\n                    grid: newGrid,\r\n                });\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toggleWall(grid, row, col) {\r\n        const newGrid = grid.slice();\r\n        const currentNode = newGrid[ROWS * row + col];\r\n        if (!currentNode.isFinish && !currentNode.isStart) {\r\n            currentNode.isWall = !currentNode.isWall;\r\n            this.setState({ grid: newGrid });\r\n        }\r\n    }\r\n\r\n    handleNodeOperations(row, col, NODE_STATE) {\r\n        const {\r\n            START_NODE_ROW,\r\n            START_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n            grid,\r\n        } = this.state;\r\n        switch (NODE_STATE) {\r\n            case 1:\r\n                if (\r\n                    this.toggleStartOrFinish(\r\n                        grid,\r\n                        row,\r\n                        col,\r\n                        START_NODE_ROW,\r\n                        START_NODE_COL,\r\n                        \"START\"\r\n                    )\r\n                ) {\r\n                    this.setState({\r\n                        START_NODE_ROW: row,\r\n                        START_NODE_COL: col,\r\n                    });\r\n                }\r\n                break;\r\n            case 2:\r\n                if (\r\n                    this.toggleStartOrFinish(\r\n                        grid,\r\n                        row,\r\n                        col,\r\n                        FINISH_NODE_ROW,\r\n                        FINISH_NODE_COL,\r\n                        \"FINISH\"\r\n                    )\r\n                ) {\r\n                    this.setState({\r\n                        FINISH_NODE_ROW: row,\r\n                        FINISH_NODE_COL: col,\r\n                    });\r\n                }\r\n                break;\r\n            case 3:\r\n                this.toggleWall(grid, row, col);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    createNode(row, col) {\r\n        const {\r\n            START_NODE_ROW,\r\n            START_NODE_COL,\r\n            FINISH_NODE_ROW,\r\n            FINISH_NODE_COL,\r\n        } = this.state;\r\n        return {\r\n            row,\r\n            col,\r\n            isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n            isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n            cost: {\r\n                F: Infinity,\r\n                G: Infinity,\r\n                H: Infinity,\r\n            },\r\n        };\r\n    }\r\n\r\n    modifyNodeState(STATE) {\r\n        this.setState({ modifyingNodeState: STATE });\r\n    }\r\n\r\n    generateMaze(grid) {\r\n        this.setState({\r\n            disableMazesButton: true,\r\n            disableClearMazeButton: false,\r\n        });\r\n        const twoDArray = convert1Dto2DArray(grid, ROWS, COLS);\r\n        const mazeGrid = generateMaze(twoDArray, ROWS, COLS);\r\n        const OneDArray = convert2Dto1DArray(mazeGrid);\r\n        this.setState({ grid: OneDArray });\r\n    }\r\n\r\n    animatePath(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        this.setState({ disableNodesButton: true, highlightMazeNodes: false });\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, this.state.speed * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).className = \"node node-visited\";\r\n                }\r\n            }, this.state.speed * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                if (!node.isStart && !node.isFinish && !node.isWall) {\r\n                    document.getElementById(\r\n                        `node-${node.row}-${node.col}`\r\n                    ).classList = \"node node-shortest-path\";\r\n                }\r\n                if (node.isFinish) {\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            disableClearMazeButton: false,\r\n                        });\r\n                    }, 1000);\r\n                }\r\n            }, this.state.speed * i);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            grid,\r\n            modifyingNodeState,\r\n            disableMazesButton,\r\n            disableNodesButton,\r\n            disableClearMazeButton,\r\n        } = this.state;\r\n        return (\r\n            <div>\r\n                <BackBar />\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-7 mb-1\">\r\n                            <div className=\"box shadowT mb-2\">\r\n                                <div\r\n                                    onMouseOut={() =>\r\n                                        this.unHighlightDiagonals()\r\n                                    }\r\n                                    onMouseOver={() =>\r\n                                        this.highlightDiagonals()\r\n                                    }\r\n                                    id=\"grid\"\r\n                                    className=\"grid\"\r\n                                >\r\n                                    {grid.map((node, idx) => {\r\n                                        const {\r\n                                            row,\r\n                                            col,\r\n                                            isStart,\r\n                                            isFinish,\r\n                                            isWall,\r\n                                        } = node;\r\n                                        return (\r\n                                            <Node\r\n                                                key={idx}\r\n                                                col={col}\r\n                                                isFinish={isFinish}\r\n                                                isStart={isStart}\r\n                                                isWall={isWall}\r\n                                                row={row}\r\n                                                onNodeClick={(row, col) =>\r\n                                                    this.handleNodeOperations(\r\n                                                        row,\r\n                                                        col,\r\n                                                        modifyingNodeState\r\n                                                    )\r\n                                                }\r\n                                                onNodeOver={(row, col) =>\r\n                                                    this.highlightNodes(\r\n                                                        row,\r\n                                                        col\r\n                                                    )\r\n                                                }\r\n                                                onNodeOut={(row, col) =>\r\n                                                    this.unHighlightNodes(\r\n                                                        row,\r\n                                                        col\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-5 shadowT rounded-b mb-2 bg-light\">\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn bg-start\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(START_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Source\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn bg-end\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(END_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Destination\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableNodesButton}\r\n                                    className=\"btn btn-dark\"\r\n                                    onClick={() =>\r\n                                        this.modifyNodeState(WALL_NODE_STATE)\r\n                                    }\r\n                                >\r\n                                    Place Wall\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableMazesButton}\r\n                                    className=\"btn btn-secondary\"\r\n                                    onClick={() => this.generateMaze(grid)}\r\n                                >\r\n                                    Generate Maze\r\n                                </button>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    disabled={disableClearMazeButton}\r\n                                    className=\"btn btn-secondary\"\r\n                                    onClick={() => this.clearBoard()}\r\n                                >\r\n                                    Clear Maze\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"btn-group btn-block mt-2\">\r\n                                <div className=\"input-group\">\r\n                                    <select\r\n                                        disabled={disableNodesButton}\r\n                                        id=\"pathFindingAlgoDropDown\"\r\n                                        className=\"custom-select\"\r\n                                        defaultValue=\"0\"\r\n                                    >\r\n                                        <option disabled value=\"0\">\r\n                                            Select Algorithm\r\n                                        </option>\r\n                                        <option value=\"1\">Dijkstras</option>\r\n                                        <option value=\"2\">\r\n                                            Breadth First Search\r\n                                        </option>\r\n                                        <option value=\"5\">\r\n                                            Depth First Search\r\n                                        </option>\r\n                                        <option value=\"3\">A* Search</option>\r\n                                        <option value=\"4\">\r\n                                            Bi-Directional Search\r\n                                        </option>\r\n                                    </select>\r\n                                    <div className=\"input-group-append\">\r\n                                        <button\r\n                                            disabled={disableNodesButton}\r\n                                            onClick={() =>\r\n                                                this.selectAlgorithm()\r\n                                            }\r\n                                            className=\"btn bg-purple\"\r\n                                        >\r\n                                            Perform Search\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <Legend />\r\n                            <ComplexityTable />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import generate from \"@indutny/maze\";\r\n\r\nexport function generateMaze(grid, ROW, COL) {\r\n    const maze = generate({ width: COL, height: ROW });\r\n    for (let i = 0; i < ROW; i++) {\r\n        for (let j = 0; j < COL; j++) {\r\n            const { row, col } = grid[i][j];\r\n            if (grid[i][j].isStart || grid[i][j].isFinish) {\r\n                if (row > 0) maze[row - 1][col] = 0;\r\n                if (row < ROW - 1) maze[row + 1][col] = 0;\r\n                if (col > 0) maze[row][col - 1] = 0;\r\n                if (col < COL - 1) maze[row][col + 1] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < ROW; i++) {\r\n        for (let j = 0; j < COL; j++) {\r\n            if (\r\n                !grid[i][j].isStart &&\r\n                !grid[i][j].isFinish &&\r\n                maze[i][j] === 1\r\n            ) {\r\n                grid[i][j].isWall = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return grid;\r\n}\r\n","import React from \"react\";\n\nimport NavBar from \"./utils/navbar\";\nimport { Route } from \"react-router-dom\";\n\n//IndexTable\nimport IndexTable from \"./utils/indexTable\";\n\n// Word Search\nimport WordSearch from \"./wordSearchVisualiser/wordSearch\";\n\n// Sorting Visualiser\nimport SortingVisualiser from \"./sortingAlgorithms/sortingVisualiser\";\n\n// Searching Visualiser\nimport BinarySearch from \"./searchingAlgorithms/binarySearch/binarySearch\";\nimport LinearSearch from \"./searchingAlgorithms/linearSearch/linearSearch\";\n\n// Backtracking Visualiser\nimport NQueensProblem from \"./backTrackingAlgorithms/nQueensProblem/nQueensProblem\";\nimport RatInAMazeProblem from \"./backTrackingAlgorithms/ratInAMaze/ratInAMaze\";\n\nimport PathFinderVisualiser from \"./pathFinderVisualiser/pathfinderVisualiser\";\n\n// Stylesheets\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar />\n                <Route exact path=\"/\" component={IndexTable} />\n                <Route path=\"/sorting\" component={SortingVisualiser} />\n                <Route path=\"/linear-search\" component={LinearSearch} />\n                <Route path=\"/binary-search\" component={BinarySearch} />\n                <Route path=\"/n-queens-problem\" component={NQueensProblem} />\n                <Route path=\"/rat-in-a-maze\" component={RatInAMazeProblem} />\n                <Route path=\"/pathfinder\" component={PathFinderVisualiser} />\n                <Route path=\"/word-search\" component={WordSearch} />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}